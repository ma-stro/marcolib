;*****************************************************************************;                   FIRST TESTS OF THE SAMPLER (WT); THIS FILE CONTAINS ALL THE ELEMENTS NEEDED TO RUN WT AND A FREEZE;-----------------------------------------------------------------------------; OUTFILE: test-wt1;(set-colon 'CTL1)(setf out-file "big-testWT-1")(clear-batch);-----------------------------------------------------------------------------;LOCAL USER-FRIENDLY DEBUGGING FUNCTIONS;(print);(print "TO ENABLE CSOUND DO: (set-csound)");(print "   TO DISABLE IT DO: (unset-csound)");(print);(print "TO ENABLE WRITING ONTO " out-file " DO: (set-out)");(print "   TO DISABLE IT DO: (unset-out)");(print)(defvar RUN-FLAG t)(defvar OUT-FLAG t)(defun set-csound ();   (set-out-flag)   (setf RUN-FLAG t)   'ok)(defun unset-csound ()   (setf RUN-FLAG ())   'ok)(defun set-out ()   (setf OUT-FLAG t)   'ok)(defun unset-out ()   (setf OUT-FLAG ())   'ok);*****************************************************************************;		PART 1: SETTING THE GLOBAL PARAMETERS;-----------------------------------------------------------------------------;(unset-out)(set-out);(unset-csound)(set-csound)	(use-csound 'mac)	(normal-mode) 	(enable-print);*****************************************************************************;		PART 2: LOADING THE DATA BASES;-----------------------------------------------------------------------------; (load virtual envelopes (files in $LLfun and with extension .fun.ll);	(load-fun 'wt1) ;-----------------------------------------------------------------------------; below is the contents of the file that ought be be loaded;			WT ENVS : AD-HOC FUNS FOR WT;			REGION   : 10 - 50(setf f-10  (make_ve  (make_fun '(1 0 1 1))	10))(setf f-11 (make_ve  (make_fun '(0 0  1 .51   0 1))	11) )(setf f-12 (make_ve  (make_fun '(1 0  0 .51  1 1))	12) );-----------------------------------------------------------------------------;-----------------------------------------------------------------------------; SETTING MODULATION CODES(setf cae-a0 '(list 0.1 0.2 (s_ve f-10)) ) ; flat AENV(setf cae-a1 '(list 0.0 0.1 (s_ve f-11)) ) ; 0->1->0 AENV(setf cam-a0 '(list 0.0 0.0 5.0) )	; no modulation(setf cam-a1 '(list 0.1 0.0 5.0) )	; only 10% jitter(setf cam-a2 '(list 0.0 0.1 5.0) )	; only 10% tremolo(setf cam-a3 '(list 0.1 0.1 5.0) )	; 10% jitter and tremolo(setf cfm-a0 '(list 0.5 6.0 0.0 (s_ve f-10)) )	; no modulation(setf cfm-a1 '(list 0.0 3.0 1.0 (s_ve f-10)) )	; 1-semitone vibrato(setf cfm-a2 '(list 1.0 3.0 1.0 (s_ve f-10)) )	; 1-semitone jitter(setf cfm-a3 '(list 0.5 6.0 2.0 (s_ve f-10)) )	; 2-semitone jitter+vibrato(setf cfp-a0 '(list 0.0 (s_ve f-10) 0.2 PRT-FM) )	; no portamento;-----------------------------------------------------------------------------;DEFINE SOME TEST CONTROL STRUCTURES FOR FREEZE;	ABSOLUTE DEFINITION(setf frz1      ''(	 (inc-pt 0.4)	 (dur 0.7)	 (skip 0.2)	 (end- 0.1)	 (ampfac 1.0)	 (xin 0.1)	 (xout 0.1)	 (first-xout 0.05)	 (last-xin 0.05)	) );	USING OVERLAP AND JITTER(setf frz2   '(let ((ovlp (* (dur_wt (curr_wt))  0.1)) )       `(	 (inc-pt (* ,ovlp 4.0))	 (dur (ran (* ,ovlp 2.0)		   (* ,ovlp 0.5)) )	 (skip (ran (* ,ovlp 4.0)		    ,ovlp) )	 (end- ,ovlp)	 (ampfac 1.0)	 (xin ,ovlp)	 (xout ,ovlp)	 (first-xout ,ovlp)	 (last-xin ,ovlp)	)     ));	USING OVERLAP, JITTER AND SI DEPENDENCE(setf frz3   '(let ((ovlp (* (dur_wt (curr_wt) (my-si_wt)) 0.1)) )       `(	 (inc-pt (* ,ovlp 2.0))	 (dur (ran (* ,ovlp 3.0)		   (* ,ovlp 1.0)) )	 (skip (ran (* ,ovlp 6.0)		    (* ,ovlp 2.0)) )	 (end- (* ,ovlp 2.0) )	 (ampfac (ran 0.5 0.2) )	 (xin ,ovlp)	 (xout ,ovlp)	 (first-xout ,ovlp)	 (last-xin ,ovlp)	)     ));	RELATIVE DEFINITION WITH FUNCTIONS (STILL TO DO)(setf frz4 ());-----------------------------------------------------------------------------;DEFINE A SOME TEST LCO'S (Local Control Overwrite)(setf lc1   (make_ctl '(frz-mode 1.0) '(si)	     '(frz-ctl 2)))(setf lc2   (make_ctl '(frz-ctl '( (dur 1.123)))));-----------------------------------------------------------------------------;DEFINE 3 TEST SOUND OBJECTS;wtest		hard bow multiphonics;bass.010	44100 mono 2.4 sec(setf wtest (make_wt "bass-010_44m.aiff"  (getenv 'WTDIR) ))(set-si_wt wtest '(1.0 1.5))(set-beg-off_wt wtest 0.0)(set-end-off_wt wtest 2.0)	; CONSTRAINED TO 2.0 SEC(set-frz_wt wtest frz1)(set-flt_wt wtest 500.0)(set-fade_wt wtest '(0.4 0.24));-----------------------------------------------------------------------------;wt-cb.C1a  	pizzicato;bass.29	44100 mono 7.21s 318090 Mips;;Si4; (setq wtest1a (make_wt "bass-29_44m.aiff" (getenv 'WTDIR)))(set-freq_wt wtest1a `(,(pch 'SI4) ,(pch 'LA4)) ) (set-beg-off_wt wtest1a 0.0)(set-end-off_wt wtest1a 2.59);(set-dur-att_wt wtest1a 0.0);-----------------------------------------------------------------------------;wt-cb.C1b  	pizzicato;bass.29	32000 1 7.21s 318090 Mips;;La4; (setf wtest1b (make_wt "bass-29_44m.aiff" (getenv 'WTDIR)))(set-freq_wt wtest1b `(,(pch 'SI4) ,(pch 'LA4)) ) (set-beg-off_wt wtest1b 2.59) (set-end-off_wt wtest1b 7.21);(set-dur-att_wt wtest1b 0.0);-----------------------------------------------------------------------------(defun reverse-cwt (wt)   (list	wt	(dur_wt (eval wt))	0));*****************************************************************************;		PART 3: DEFINING THE ACTUAL EVENTS;-----------------------------------------------------------------------------	(set-gbl 'GBLAMP 1.0);	(set-colon 'CTL1);-----------------------------------------------------------------------------(when OUT-FLAG (open-output-file out-file) );-----------------------------------------------------------------------------(setf NEV 5)(setf TYPE 1)(setf DRT 10.0);(set-gbl 'MINFQ 0.5)(defun reverse-cwt (wt)   (list	wt	(dur_wt (eval wt))	0));     type  refat  durtot amptot  nev(WT  TYPE   0.0   DRT    1.0   NEV	'(ED (lkpr NEV (make_fun '(0 0  1 2)) 0.0 5.0) );	'(DUR (rept NEV 0.1) ); SET DUR > 0.2 TO ACTIVATE THE FREEZE (MAXIMUM DURATION OF INPUT FILE = 2.0)	'(DUR (rept NEV 0.05) )	'(AMP (rept NEV 1.0) )	'(CWT '( 		'(list 'wtest) 		'(reverse-cwt 'wtest) 		'(list 'wtest1a) 		'(list 'wtest1b) 		'(reverse-cwt 'wtest1a) 				))	'(FQ '(		'(list 1. 1.0)		'(list 1. 1.0)		'(list 1. 1.0)		'(list 1. 1.0)		'(list 1. 1.0); ACTIVATE THESE FIELDS IF YOU WANNA TRY ALTERNATIVE FREEZE CONTROLS;		'(list 1.0 1.0 (make_ctl;				'(frz-mode 1);				'(frz-ctl 1) ));		'(list 1.0 1.0 (make_ctl;				'(frz-mode 1);				'(frz-ctl 2) ));		'(list 1.0 1.0 (make_ctl;				'(frz-mode 1);				'(frz-ctl 3) ))		) )	'(BAL (lkp NEV (make_fun '(0.5 0  0.5 2))) )	'(CAENV (lp NEV '(cae-a0)) )	'(CAMOD (rept-lp NEV '(cam-a0 (cam-a0))) )	'(CFMOD (l-val NEV '(cfm-a0 cfm-a0 cfm-a0 cfm-a0 cfm-a0)) )	'(CFPRT (bkwd-lp NEV '(cfp-a0)) )	'(NOSC (bkwd-lp NEV '(5)) )	'(ED2 (rept NEV 0.005) )	'(DUR2 (rept NEV -1))	'(AMP2 (rept NEV 1) )	'(STON (rept NEV 0.1) ));-----------------------------------------------------------------------------;		[INSERT AS MANY INSTRUCTIONS AS YOU WISH];-----------------------------------------------------------------------------; (out-end "e" DRT)(when OUT-FLAG (close-output-file out-file) );*****************************************************************************(when (and RUN-FLAG OUT-FLAG)   (run out-file 'WT TYPE '(wt1) 'RESC 0.5) );(run-batch);*****************************************************************************