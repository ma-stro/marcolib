; OUTFILE: wt-t1;(set-colon 'CTL1)(setq outfl 'wt-t1);*****************************************************************************;			SAMPLING PACKAGE  : MOLD INSTRUCTION;-----------------------------------------------------------------------------;; ;			   ::Input Instruction::;;		(WT TYPE REFAT DURTOT AMPTOT NEV [FIELDS]);;			::Csound Ouput Instruction::;;iX AT DUR AMP SI BAL AAJ AAT AFT ATK DEC FAEV J/V FQV DFQ FFEV DPRT FPRT;								WT-INDX WT-PHS; (where X = instrument number = 20 + TYPE);;		    ::Sun-Mercury (Moon) Output Instruction::;;				  v1 FQ AT DUR;		   env ATK DKY mienv AEV  pev PDR PEV fev FEV;	       	params AMP BAL JIT TRM TFQ JTf VBA VFQ PRT WT PHS ?;;*****************************************************************************;		PART 1: SETTING THE GLOBAL PARAMETERS;-----------------------------------------------------------------------------; {Synthesizer Choice / System Operation Mode / Printing Mode};;; (setq M 'laurie "or" 'philip "or" 'steve "or" 'robert "or" 'nadia "or" 'fred);	(use-csound 'mac);	(use-moon);;	(normal-mode)			; "normal" behaviour during tests;	(alternative-mode)		; "alternative" "      "      ";	(deb-mode)			; debug-mode (no synthesis);	(enable-print)			; errors and warnings;	(disable-print)			; only errors ;;*****************************************************************************;		PART 2: LOADING THE DATA BASES;-----------------------------------------------------------------------------; (load virtual envelopes (files in $LLfun and with extension .fun.ll);;(load-fun 'wt1) ;;	(actual files to be loaded ciamp-name.fun.ll cif-name.fun.ll);;			 CIAMP (amplitude module);		  (envelope)   (filename prefixed cae-);		  (modulation) (filename prefixed cam-);(load-ciamp 'MOLD)(setq cae-a0 '(list 0.1 0.2 (s_ve f-10)) ) ; flat AENV(setq cae-a1 '(list 0.0 0.1 (s_ve f-11)) ) ; 0->1->0 AENV(setq cam-a0 '(list 0.0 0.0 5.0) )	; no modulation(setq cam-a1 '(list 0.1 0.0 5.0) )	; only 10% jitter(setq cam-a2 '(list 0.0 0.1 5.0) )	; only 10% tremolo(setq cam-a3 '(list 0.1 0.1 5.0) )	; 10% jitter and tremolo;;			 CIF (frequency module);		  (modulation) (filename prefixed cam-);		  (portamento) (filename prefixed cfp-);(load-cif 'MOLD)(setq cfm-a0 '(list 0.5 6.0 0.0 (s_ve f-10)) )	; no modulation(setq cfm-a1 '(list 0.0 3.0 1.0 (s_ve f-10)) )	; 1-semitone vibrato(setq cfm-a2 '(list 1.0 3.0 1.0 (s_ve f-10)) )	; 1-semitone jitter(setq cfm-a3 '(list 0.5 6.0 2.0 (s_ve f-10)) )	; 2-semitone jitter+vibrato(setq cfp-a0 '(list 0.0 (s_ve f-10) 0.2 PRT-FM) )	; no portamento;; {load the WT objects (uncompiled or compiled)}; {files in $LLwt and with extension .wt.ll (and prefix comp-)};;	(load-wt 'MOLD);	(load-comp-wt 'MOLD)(load-comp-wt 'wt1);;*****************************************************************************;		PART 3: DEFINING THE ACTUAL EVENTS;-----------------------------------------------------------------------------;; {global scalar for amplitude (useful for short snd files)};(set-gbl 'GBLAMP 1.0);; {convenient local variables} {use package #:$USER:ctl1};;(set-colon 'CTL1)			; :NEV = number of events within an instruction			; :TYPE = type of synthesis (ADD/FM/WT)			; :OUTFL = output file (score, snd file, etc.);-----------------------------------------------------------------------------(open-output-file outfl)	; write data onto MOLD-WT.scr;-----------------------------------------------------------------------------;; INSTRUCTION No. 1(setq NEV 8)(setq TYPE 1)(setq DRT 20.0); OPTION 1(defun reverse-cwt (wt)   (list	wt	(dur_wt (eval wt))	0)); OPTION 2;(defun reverse-cwt (wt);   (list;	'list;	`(quote ,wt);	(dur_wt (eval wt));	0));     type  refat  durtot amptot  nev(WT  TYPE   1.0   DRT    1.0   NEV	'(ED '(0.0 1.0 2.0 3.0 4.0 5.0 8.0 9.0 10.0) )	'(DUR (rept NEV 0.05) )	'(AMP (rept NEV 1.0) )	'(CWT '( 		'(list 'test-wt) 		'(list 'test-wt); OPTION 1:		'(reverse-cwt 'test-wt); OPTION 2:	(reverse-cwt 'wt-cb.C1a) 		'(list 'test-wt) 		'(list 'test-wt) 		'(list 'test-wt 0.0 1.0) 		'(list 'test-wt 10.0 2.0) 		'(list 'test-wt 2.0 0.0)		))	'(FQ '(		'(list 1.0 1.0)		'(list 1.0 1.0)		'(list 1.0 1.0)		'(list 1.0 1.0)		'(list 1.0 1.0)		'(list 1.0 1.0)		'(list 1.0 1.0)		'(list 1.0 1.0)		))	'(BAL (lkp NEV (make_fun '(1 0  0 2))) )	'(CAENV (lp NEV '(cae-a0)) )	'(CAMOD (rept-lp NEV '(cam-a0 (cam-a0))) )	'(CFMOD (l-val nev '(cfm-a0 cfm-a0 cfm-a0 cfm-a0 cfm-a0)) )	'(CFPRT (bkwd-lp nev '(cfp-a0)) );	'(NOSC (bkwd-lp nev '(1 2)) )	'(ED2 (rept nev 0.15) )	'(DUR2 (rept nev (/ 1 nev)) )	'(AMP2 (rept nev 1) )	'(STON (l-val nev		'(0.01 0.03 0.05 0.1 0.2  -5 -2 -1 -0.4 -0.1		  0.01 0.03 0.05 0.1 0.2  -5 -2 -1 -0.4 -0.1		  0.01 0.03 0.05 0.1 0.2)) ));-----------------------------------------------------------------------------;		[INSERT AS MANY INSTRUCTIONS AS YOU WISH];-----------------------------------------------------------------------------(out-end 'e 20.0)		; print end csound instruction on outfl(close-output-file :outfl)	; close output-file;;*****************************************************************************;			PART 4: SYNTHESIS STEP;-----------------------------------------------------------------------------; run csound on mips or erik;;     file  synth type  fun   flag  Resc-fact;(run :outfl 'WT :TYPE 'wt1 'FL/R 0.5)		; SH = short;						; FL = float;						; /R = rescale;-----------------------------------------------------------------------------;*****************************************************************************