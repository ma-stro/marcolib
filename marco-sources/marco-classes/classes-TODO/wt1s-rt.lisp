;******************************************************************;		     CLASS WT1s-ROOT; 	      Root class for the class WT1s;******************************************************************(in-package om); LISP-DEFINED CLASSES SHOULD RESIDE IN THE LIBRARY'S PACKAGE AND ;   NOT IN THE USER PACKAGE, WHICH CONTAINS ALL THE CLASSES;   GRAPHICALLY DEFINED(defclass! wt1s-root  (cs-evt)  (   ( source-code :initform                 (load-buffer-textfile                  (get-orc-source (get-orc "WT1s" cr::MSorc) )                  'textfile "append")                 :allocation :class                 :type textfile                 :accessor source-code)   ( numchan :initform (or (get-orc-channels (get-orc "WT1s" cr::MSorc)) 2)            :allocation :class  :accessor numchan)   ( globals-list :initform                   (get-orc-globals                   (get-orc "WT1s" cr::MSorc))                  :allocation :class                  :type list                  :accessor globals-list)   ( amp	:type number		:initarg :amp   		:initform 500.0		:accessor amp)   ( freq	:type number        	:initarg :freq         	:initform 1.0        	:accessor freq)   ( bal	:type number		:initarg :bal   		:initform 0.5		:accessor bal)   ( jta	:type number		:initarg :jta   		:initform 0.0		:accessor jta)   ( tra	:type number		:initarg :tra   		:initform 0.0		:accessor tra)   ( trf	:type number		:initarg :trf   		:initform 5.0		:accessor trf)   ( atk	:type number		:initarg :atk   		:initform 0.01		:accessor atk)   ( dec	:type number		:initarg :dec   		:initform 0.05		:accessor dec)   ( aenv	:type cs-table		:initarg :aenv                              ; x-pts y-pts decimals number size  		:initform (make-cs-table  'Gen07  '(0 13 500 513) '(0 1 1 0) 1 "?" 513)		:accessor aenv)   ( jtv	:type number		:initarg :jtv   		:initform 0.5		:accessor jtv)   ( vfq	:type number		:initarg :vfq   		:initform 6.0		:accessor vfq)   ( fdev	:type number		:initarg :fdev   		:initform 0.0		:accessor fdev)   ( fenv	:type cs-table		:initarg :fenv                              ; x-pts y-pts decimals number size  		:initform (make-cs-table  'Gen07  '(0 513) '(0 0) 1 "?" 513)		:accessor fenv)   ( plow	:type number		:initarg :plow   		:initform 0.0		:accessor plow)   ( pup 	:type number		:initarg :pup   		:initform 0.0		:accessor pup)   ( penv	:type cs-table		:initarg :penv                              ; x-pts y-pts decimals number size  		:initform (make-cs-table  'Gen07  '(0 513) '(0 0) 1 "?" 513)		:accessor penv)   ( pdur	:type number		:initarg :pdur   		:initform 0.1		:accessor pdur)   ( wphs	:type number		:initarg :wphs  		:initform 0.0		:accessor wphs)#|   ( wenv	:type cs-table		:initarg :wenv                              ; x-pts y-pts decimals number size  		:initform (make-cs-table  'Gen07  '(0 513) '(0 0) 1 "?" 513)		:accessor wenv)|#   ( wenv	:type number		:initarg :wenv   		:initform 51		:accessor wenv)   ( wxin	:type number		:initarg :wxin  		:initform 0.01		:accessor wxin)   ( wxout	:type number		:initarg :wxout  		:initform 0.01		:accessor wxout)   ( wflt	:type number		:initarg :wflt  		:initform 0.0		:accessor wflt))  (:documentation   ";*****************************************************************************;	WAVE TABLE SYNTHESIS  INSTRUMENT [ SAMPLING ] N. 21;		TYPE 1 : COMPLETE INSTRUMENT STEREO (BALANCE MODULE WITH SINE);-----------------------------------------------------------------------------;                      NEW VERSION VALID FROM CHROMA2001;-----------------------------------------------------------------------------; SIMPLIFIED PERCEPTUAL COMPENSATION: SINCE THE COMPUTATION IS FLOATING POINT;    NO NEED TO REDUCE THE AMPLITUDES IF MAXIMUM IS > 1 AFTER THE COMPENSATION; ALSO NO MODIFICATION OF THE GLOBAL AMPLITUDE TO A RELATIVE AMPLITUDE;-----------------------------------------------------------------------------;	p1	instrument number [21];	p2	action time [sec];	p3	duration [sec];		NB: the instrument repeats the sound if the duration is too long;	p4	global amplitude [0:1000];	p5	frequency [transposition factor, 1 = same as input sound];  (p6)	stereo balance [STEREO VERSION ONLY];	p7	jitter amplitude, with internal perceptual compensation [0:1];	p8	tremolo amplitude, with internal perceptual compensation [0:1];	p9	tremolo frequency [Hz];	p10	attack duration [sec];	p11	decay duration [sec], with internal readjustment if needed;	p12 function number for amplitude envelope;	p13	balance freq. jitter/vibrato [1 = jitter / 0 = vibrato];	p14	vibrato frequency [Hz];	p15	frequency deviation [semitones];	p16	function number for frequency envelope;	p17	lower interval for portamento [semitones];	p18	upper interval for portamento [semitones];	p19	function number for portamento envelope;	p20	portamento duration [sec];	p21	initial phase [sec];	p22	function number for the input sound;	p23	xin [sec];	p24	xout [sec];	p25	filter frequency [Hz];-----------------------------------------------------------------------------;-----------------------------------------------------------------------------; COMPULSORY FUNCTIONS (LOADED BY THE CLASS):;	f2	vibrato (sine wave);	f3	tremolo (sine wave);   	f4	function for janusing; OTHER FUNCTIONS, NOT LOADED AUTOMATICALLY; FUNCTIONS USED BY OTHER INSTRUMENTS;	f1	audio sine wave;	f5	large non-interpolating sine for the FOF;	f6	half sine from -pi/2 to pi/2; OTHER USEFUL FUNCTIONS (CHROMA2001);   	f6	constant 1;   	f7	constant 0;	f8	straight line for reading into a table;   	f9	triangle line from 0 to 1 to 0;   STRAIGHT LINES (NOT RESCALED);	f11	-1 ->  0;	f12	 1 ->  0;	f13	 0 ->  1;	f14	 0 ->  -1;-----------------------------------------------------------------------------;-----------------------------------------------------------------------------; KONTROL KEYWORDS FOR CHROMA2001 (CTL1);  GLOBAL KEYWORDS:;	ACTION-TIME	: start time of the whole event;	DURTOT		: total duration of the event (longer components are;    		                automatically clipped;	AMPTOT		: amplitude scaler (1.0);	NUMROWS		: amount of rows (components) in the event;  LOCAL KEYWORDS:;  GENERAL;   E-DELS	:	entry delays [sec] (0.0);	DURS	:	duration [0-1, scaler of DURTOT] (1.0);	AMP	:	amplitude [0-1000, scaler of AMPTOT] (500.0);	FREQ	:	sample increment [1 = play as such] (1.0);	BAL	:	panpot [0=left, 1=right] (STEREO VERSION ONLY) (0.5);  SAMPLER CONTROL (ADDED);	CWT	:	Control field for the WT object;				  Must be a list with:;					(<"name" OR 'name OR "full-pathname"> [begin end]);					begin / end with respect to beg-off;				  If <name> fetch the files from the directory "WTdir";	FQWT	:	control field for the WT object's FreQuency;				  Must be a list with:;					(<freq OR SI> [<ref freq OR ref SI>] [LCO]);					freq = frequency;					SI = sample increment (maximum allowed specified in;					   the global variable MAXSI [10.0], above = freq);					ref = reference frequency or SI for the WT object;					LCO = Local Control Overlap, structure of type 'CTL;					  containing values for the FRZ-MODE and FRZ-CTL that;					  will be used in place of the object's default values;               in total, then:;                  a) (100) : use this wanted freq, get the ref freq from WT;                  b) (100 200) : explicit definition of wanted / ref fq;                  c) (100 (<lco>) : as a), with lco defined;                  d) (100 200 (<lco>)) : as b) with lco defined; THE SLOTS BELOW (+ FQ) FILLED BY CWT AND FQWT;	WPHS	:	initial phase (0.0);	WENV	:	function number for the input sound [GEN];	WXIN	:	xin [sec] (0.01);	WXOUT	:	xout [sec] (0.01);	WFLT	:	low-pass filter frequency [Hz] (0.0);  AMPLITUDE ENVELOPE;	ATK	:	attack time [sec] (0.01);	DEC	:	decay time [sec] (0.05);	AENV	:	amplitude envelope [GEN];  AMPLITUDE MODULATION;	JTA	:	jitter amplitude [0-1, % of amplitude + compensation] (0.0);	TRA	:	tremolo amplitude [0-1, % of amplitude] (0.0);	TRF	:	tremolo frequency [Hz] (5.0);  FREQUENCY MODULATION;	JTV	:	vibrato/jitter panpot [0 = all vibrato, 1 = all jitter] (0.5);	VFQ	:	vibrato frequency [Hz] (6.0);	FDEV	:	frequency deviation [semitones] (0.0);	FENV	:	frequency envelope [GEN];  PORTAMENTO;	PLOW	:	lowest (minimum) portamento amplitude [semitones] (0.0);	PUP	:	upper (maximum) portamento amplitude [semitones] (0.0);	PENV	:	portamento envelope [GEN];	PDUR	:	portamento duration [sec[ (0.1);  SUB-COMPONENTS;	NPART	:	number of sub-components (0);	STON	:	aleatoric frequency distribution for each sub-component (0.06);				POSITIVE = distribution is linear;				NEGATIVE = distribution is logarithmic;	ED2	:	entry delay of each sub-compoment [sec] (0.01);				   (cumulative effect);	DUR2	:	duration of each sub-component [0-1, nil = use the duration;				  of the main component] (1.0);	AMP2	:	amplitude of each sub-component [0-1, nil = use the amplitude;				  of the main component] (1.0);************************************************************************   "   )  (:icon 618)  );******************************************************************;			SUB-CLASSES;******************************************************************; WT1M;------------------------------------------------------------------(defclass! wt1s      (wt1s-root)		; INHERITS FROM THIS CLASS (GENERATED BY GET-INSTRUMENT)      (; GLOBAL SLOTS: THE METHOD BELOW TRANSFORMS THEM INTO GLOBAL SLOTS;    ATTENTION: A GLOBAL SLOT SHOULD NOT HAVE AN INITARG       ( durtot :type number                :initform 1.0                :accessor durtot)       ( amptot :type number                :initform 1.0                :accessor amptot)       ( cwt :type number             :initarg :cwt             :initform (list '("B-B1.aif"))             :accessor  cwt)       ( fqwt :type number              :initarg :fqwt              :initform (list '(1.0 1.0))              :accessor  fqwt)       ( npart :type number               :initarg :npart                :initform 0               :accessor  npart)       ( ston :type number              :initarg :ston              :initform 0.06              :accessor  ston)       ( ed2 :type number             :initarg :ed2             :initform 0.01             :accessor  ed2)       ( dur2 :type number              :initarg :dur2              :initform -1              :accessor  dur2)       ( amp2 :type number              :initarg :amp2              :initform -1              :accessor  amp2))      (:documentation              "Extension of the instrument WT1s, class wt1s-root.Added global slots:  durtot [sec] = total duration of the whole event  amptot [0-1] = global amplitude scalerAdded local slots:  cwt         = control field for the WT object                Must be a list with: (<\"name\" OR 'name OR \"full-pathname\"> [begin end])                                        begin / end with respect to beg-off                                        If <name> fetch the files from the directory \"WTdir\"  fqwt        = control field for the WT object's FreQuency                Must be a list with: (<freq OR SI> <ref freq OR ref SI> [LCO])					freq = frequency					SI = sample increment (maximum allowed specified in					   the global variable MAXSI [10.0], above = freq)					ref = reference frequency or SI for the WT object					LCO = Local Control Overlap, structure of type 'CTL					  containing values for the FRZ-MODE and FRZ-CTL that					  will be used in place of the object's default values npart [int]  = number of sub-components ston  [0-1]  = maximum frequency deviation for the sub-components		positive = linear distribution (value in %)		negative = logarithmic distribution (value in semitones) ed2  [sec]   = entry delay of each sub-component (cumulative effect)  dur2  [0-1]  = duration of each sub-component (scaler of DURTOT) (nil)                   (if nil, use the value of the main component) amp2  [0-1]  = amplitude of each sub-component (scaler of AMPTOT) (nil)                   (if nil, use the value of the main component)")   (:icon 618)      );------------------------------------------------------------------------------------;	METHODS FOR THIS CLASS;------------------------------------------------------------------------------------; ADD SOME GLOBAL SLOTS (THE FIRST ONES ON THE LEFT OF A CLASS BOX);     THIS METHOD MUST BE DEFINED FOR THIS CLASS(defmethod get-slot-in-out-names ((self wt1s)); MEANING OF THE FIELDS:;   SLOT NAMES (THE FIRST 3 ARE THE DEFAULT ONES);   DEFAULT VALUES;   DOCUMENTATION;   T IF IT IS A MENU   (values '("self" "numrows" "action-time" "user-fun" "durtot" "amptot")           '(nil 1 0 nil 1.0 1.0)           '("Object or object list"             "How many vertical components for init ?"             "Local event offset (in seconds)"             "User-defined function"             "Total duration for the whole event [sec]"             "Global amplitude scaler [0-1]")           '(nil nil nil nil nil nil))); SPECIFY WHICH ARE THE GLOBAL SLOTS(defmethod fixed-slots-list ((x om::wt1s))  "Specifies the fixed (global) slots for this class"  '(numrows action-time user-fun durtot amptot)); ELIMINATE THE LAST 7 SLOTS IN THE INSTRUMENT (NOT NEEDED IN THE SCORE)(defmethod nullslots ((x om::wt1s))  "Eliminate the last 7 slots from the score"  7);------------------------------------------------------------------(defmethod! orc-header ((self wt1s-root))  (list   "; Marco's GEN functions *********************************************************"   "; Marco's GEN functions *********************************************************"   "; FREQUENCY VIBRATO"   "f2  0   4097   9  1  1  0"   "; AMPLITUDE VIBRATO"   "f3  0   4097   9  1  1  0"   "; FUNCTION FOR JANUSING"   "f4 0 513 -9  0.25 1.0 0"   "; SAMPLE WAVE TABLE, NORMALLY FILLED BY CWT"   (format nil "f51  0  262145  1   ~S    0    4  1"           (path2unixpath (make-pathname :directory (pathname-directory (cr::getenv cr::CRXsnd))                                         :name "B-Bb1"                                         :type "aif")) )   ))(defmethod! orc-header ((self wt1s))  (list   "; Marco's GEN functions *********************************************************"   "; FREQUENCY VIBRATO"   "f2  0   4097   9  1  1  0"   "; AMPLITUDE VIBRATO"   "f3  0   4097   9  1  1  0"   "; FUNCTION FOR JANUSING"   "f4 0 513 -9  0.25 1.0 0"   "; SAMPLE WAVE TABLE, NORMALLY FILLED BY CWT"   (format nil "f51  0  262145  1   ~S    0    4  1"           (path2unixpath (make-pathname :directory (pathname-directory (cr::getenv cr::CRXsnd))                                         :name "B-Bb1"                                         :type "aif")) )   ));******************************************************************