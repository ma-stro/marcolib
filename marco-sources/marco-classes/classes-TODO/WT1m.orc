;*****************************************************************************;	WAVE TABLE SYNTHESIS  INSTRUMENT [ SAMPLING ] N. 21;		TYPE 1 : COMPLETE INSTRUMENT MONO (BALANCE MODULE WITH SINE);-----------------------------------------------------------------------------;                      NEW VERSION VALID FROM CHROMA2001;-----------------------------------------------------------------------------; SIMPLIFIED PERCEPTUAL COMPENSATION: SINCE THE COMPUTATION IS FLOATING POINT;    NO NEED TO REDUCE THE AMPLITUDES IF MAXIMUM IS > 1 AFTER THE COMPENSATION; ALSO NO MODIFICATION OF THE GLOBAL AMPLITUDE TO A RELATIVE AMPLITUDE;-----------------------------------------------------------------------------;	p1	instrument number [21];	p2	action time [sec];	p3	duration [sec];		NB: the instrument repeats the sound if the duration is too long;	p4	global amplitude [0:1];	p5	frequency [transposition factor, 1 = same as input sound];  (p6)	stereo balance [STEREO VERSION ONLY];	p7	jitter amplitude, with internal perceptual compensation [0:1];	p8	tremolo amplitude, with internal perceptual compensation [0:1];	p9	tremolo frequency [Hz];	p10	attack duration [sec];	p11	decay duration [sec], with internal readjustment if needed;	p12 function number for amplitude envelope;	p13	balance freq. jitter/vibrato [1 = jitter / 0 = vibrato];	p14	vibrato frequency [Hz];	p15	frequency deviation [semitones];	p16	function number for frequency envelope;	p17	lower interval for portamento [semitones];	p18	upper interval for portamento [semitones];	p19	function number for portamento envelope;	p20	portamento duration [sec];	p21	initial phase [sec];	p22	function number for the input sound;	p23	xin [sec];	p24	xout [sec];	p25	filter frequency [Hz];-----------------------------------------------------------------------------; KONTROL KEYWORDS FOR CHROMA2001 (CTL1);  GLOBAL KEYWORDS:;	ACTION-TIME	: start time of the whole event;	DURTOT		: total duration of the event (longer components are;                    automatically clipped;	AMPTOT		: amplitude scaler (1.0);	NUMROWS		: amount of rows (components) in the event;  LOCAL KEYWORDS:;  GENERAL;   E-DELS	:	entry delays [sec] (0.0);	DURS	:	duration [0-1, scaler of DURTOT] (1.0);	AMP		:	amplitude [0-1, scaler of AMPTOT] (1.0);	FREQ	:	sample increment [1 = play as such] (1.0);	BAL		:	panpot [0=left, 1=right] (STEREO VERSION ONLY) (0.5);  SAMPLER CONTROL (ADDED);	CWT		:	Control field for the WT object;				  Must be a list with:;					(<"name" OR 'name OR "full-pathname"> [begin end]);					begin / end with respect to beg-off;				  If <name> fetch the files from the directory "WTdir";	FQWT	:	control field for the WT object's FreQuency;				  Must be a list with:;					(<freq OR SI> [<ref freq OR ref SI>] [LCO]);					freq = frequency;					SI = sample increment (maximum allowed specified in;					   the global variable MAXSI [10.0], above = freq);					ref = reference frequency or SI for the WT object;					LCO = Local Control Overlap, structure of type 'CTL;					  containing values for the FRZ-MODE and FRZ-CTL that;					  will be used in place of the object's default values;               in total, then:;                  a) (100) : use this wanted freq, get the ref freq from WT;                  b) (100 200) : explicit definition of wanted / ref fq;                  c) (100 (<lco>) : as a), with lco defined;                  d) (100 200 (<lco>)) : as b) with lco defined; THE SLOTS BELOW (+ FQ) FILLED BY CWT AND FQWT;	WPHS	:	initial phase (0.0);	WENV	:	function number for the input sound [GEN];	WXIN	:	xin [sec] (0.01);	WXOUT	:	xout [sec] (0.01);	WFLT	:	low-pass filter frequency [Hz] (0.0);  AMPLITUDE ENVELOPE;	ATK		:	attack time [sec] (0.01);	DEC		:	decay time [sec] (0.05);	AENV	:	amplitude envelope [GEN];  AMPLITUDE MODULATION;	JTA		:	jitter amplitude [0-1, % of amplitude + compensation] (0.0);	TRA		:	tremolo amplitude [0-1, % of amplitude] (0.0);	TRF		:	tremolo frequency [Hz] (5.0);  FREQUENCY MODULATION;	JTV		:	vibrato/jitter panpot [0 = all vibrato, 1 = all jitter] (0.5);	VFQ		:	vibrato frequency [Hz] (6.0);	FDEV	:	frequency deviation [semitones] (0.0);	FENV	:	frequency envelope [GEN];  PORTAMENTO;	PLOW	:	lowest (minimum) portamento amplitude [semitones] (0.0);	PUP	:	upper (maximum) portamento amplitude [semitones] (0.0);	PENV	:	portamento envelope [GEN];	PDUR	:	portamento duration [sec[ (0.1);  SUB-COMPONENTS;	NPART	:	number of sub-components (0);	STON	:	aleatoric frequency distribution for each sub-component (0.06);				POSITIVE = distribution is linear;				NEGATIVE = distribution is logarithmic;	ED2	:	entry delay of each sub-compoment [sec] (0.01);				   (cumulative effect);	DUR2	:	duration of each sub-component [0-1, nil = use the duration;				  of the main component] (1.0);	AMP2	:	amplitude of each sub-component [0-1, nil = use the amplitude;				  of the main component] (1.0);-----------------------------------------------------------------------------; COMPULSORY FUNCTIONS :;	f1	audio sine wave;	f2	vibrato (sine wave);	f3	tremolo (sine wave); FUNCTIONS USED BY OTHER INSTRUMENTS;   f4	function for janusing;	f5	large non-interpolating sine for the FOF; OTHER USEFUL FUNCTIONS (CHROMA2001);   f6	constant 1;   f7	constant 0;   f8	ascending line (0->1) for reading into a table;   f9	simple triangle (0-1-0) for default envelopes;************************************************************************; Globals	sr     = 44100	kr     = 44100	ksmps  = 1	nchnls = 1	giramp = 1.0 / 3.0	; Some constants for a good jitter	girfq1 = 20.134		; from a model described in Chant	girfq2 = 9.109	girfq3 = 0.821	gimxamp= 32767	gipi	= 3.14159265	gipi2	= (gipi * 0.5)	gibal  = 2.13		; Factor to balance rms of jit/vib(trem)				; (See below)instr 21			; Initialization				; --------------		idur	  =		p3		idurosc   = 	1.0 / p3		igbamp	  =		p4		ifroct	  =     octcps( p5 )		ibal	  =		p6; correction on jitter amplitude ONLY, to compensate perceptual energy		iajit	  =		p7 * gibal		iatrm	  =		p8		itrfq	  =		p9		iatt	  =		p10		idec	  =		p11		iaenv	  =		p12		ivibfq	  =		p14		ifenv	  =		p16		ipenv	  =		p19		iprtdur	  =		p20		iwtfun	  =		p22		iflt	  =		p25		; change freq deviation and portamento into octave representation		ifdev	  =  	p15 / 12	   	   ; octave representation (1 = octave)		iprtlow	  =		p17 / 12		iprtup	  =		p18		iprtdev	  =		(iprtup - p17) / 12		; default signal functions		isigfun	  =  	1		ivibfun	  =  	2		itrmfun	  =  	3; INITIALIZATION TESTS; constrain jitvib between 0 and 1 and assign frequency jitter and vibrato amplitudes		ijtvib	  = 	(p13 < 0.0 ? 0.0 : p13)		ifjit	  = 	ifdev * ijtvib		ifvib	  =		ifdev * (1.0 - ijtvib)	; constrain iprtdur to be more than 0		iprtdur	  = 	(iprtdur <= 0.0 ? 0.01 : iprtdur)	; if bal not between 0 and 1, set to 0 and 1		ibal	  =	( ibal < 0.0 ? 0.0 : ibal )		ibal	  =	( ibal > 1.0 ? 1.0 : ibal ); if att < 0, set it to 0		iatt	  =	( iatt < 0.0 ? 0.0 : iatt ); if dec < 0, set it to 0		idec	  =	( idec < 0.0 ? 0.0 : idec ); values OK, check other things; if att+dec > dur, reajust dec, but keep att the same		idec	  =	( iatt + idec <= idur ? idec : idur-iatt ); if att >= dur, put, by default, att = dec = 1/2*dur (no undesirable clicks)		iatt	  =		( idec >= 0 ? iatt : idur/2)		idec	  =		( idec >= 0 ? idec : idur/2 ); if xin+xout > dur, set xin=xout=1/2*dur		ixin	  =	( p23 + p24 <= idur ? p23 : idur/2 )		ixout	  =	( p23 + p24 <= idur ? p24 : idur/2 )		ilen	  =	ftlen(iwtfun)		iof	  =	p21 * sr		inc	  =	sr / ilen		ifq	  =	inc * abs(p5)		isigp5	  =	(p5 < 0 ? -1 : 1)			ifroct	  =     octcps( ifq )				;--- Amplitude ---				;    ---------	; Jitter module		kaj1	randi	giramp,girfq1,-1		kaj2	randi	giramp,girfq2,-1		kaj3	randi	giramp,girfq3,-1		kajit     =	(kaj1 + kaj2 + kaj3) * iajit	; Tremolo module		katrm	oscili	iatrm,itrfq,ivibfun	; Amplitude modulation		kamod	  =	(kajit + katrm + igbamp) * gimxamp	; Amplitude envelope		kaenv   oscili 	kamod,idurosc,iaenv	; Global amplitude envelope		kamp 	linen 	kaenv,iatt,idur,idec				;--- Frequency ---				;    ---------	; Jitter module		kfj1	randi	giramp,girfq1,-1		kfj2	randi	giramp,girfq2,-1		kfj3	randi	giramp,girfq3,-1		kfjit     =	(kfj1 + kfj2 + kfj3) * ifjit	; Vibrato module		kfvib	oscili	ifvib,ivibfq,ivibfun	; Frequency "modulation"		kfmod	  =	kfjit + kfvib	; Frequency envelope		kfenv   oscili 	kfmod,idurosc,ifenv	; Portato module		kfprt1	oscil1i	0,iprtdev,iprtdur,ipenv		kfprt	= kfprt1 + iprtlow	; Global frequency 	; cpsoct does not work when the argument is too small (resulting in getting	;    sub-audio values corresponding to octave 0)	; solution: shift conversion around octave 8 (middle octave) and divide	;    by conversion of the shift (Serge Lemouton) 		kfrq	  =	cpsoct(8 + kfenv + kfprt + ifroct ) / cpsoct(8)		        ;--- Main oscillator / panning ---			;    ---------------   -------		andx	phasor	kfrq		asigi	tablei	iof + ilen * andx * isigp5 ,iwtfun,0		asig	  = 	asigi * kamp	; Activate the code between here and "filter:" only during xin and xout			timout	ixin,idur-(ixin+ixout),filter		a1	linen	1,ixin,ixin+ixout,ixout		a2	tablei  a1,4,1,0,0		asig	  =	asig * a2 * a2		filter:	; If the filter's frequency is 0, skip the filter	; REMARK: the following test is performed at each sample	;	  this might be avoided by making two independent instruments,	;	    with and without the filter		if  iflt  =  0	goto nofilter				asig	tone	asig,iflt		nofilter:				out		asigendin