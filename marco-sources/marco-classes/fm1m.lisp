;******************************************************************;		     CLASS FM1m-ROOT; 	      Root class for the class FM1M;******************************************************************(in-package :om); LISP-DEFINED CLASSES SHOULD RESIDE IN THE LIBRARY'S PACKAGE AND ;   NOT IN THE USER PACKAGE, WHICH CONTAINS ALL THE CLASSES;   GRAPHICALLY DEFINED(defclass! fm1m-root  (cs-evt)  (   ( source-code :initform                 (load-buffer-textfile                  (get-orc-source (get-orc "FM1m" :local) )                  'textfile "append")                 :allocation :class                 :type textfile                 :accessor source-code)   ( numchan :initform (or (get-orc-channels (get-orc "fm1m" :local)) 1)            :allocation :class  :accessor numchan)   ( globals-list :initform                   (get-orc-globals                   (get-orc "FM1m" :local))                  :allocation :class                  :type list                  :accessor globals-list)   ( macros-list :initform                  (get-orc-macros (get-orc "fm1m" :local))                 :allocation :class                 :type list                 :accessor macros-list)   (orc-header :initform (list                          "; DEFAULT GENs **********************************************************"                          "; audio wave, sine"                          "f1  0   524289   10 1"                          "; vibrato wave, sine"                          "f2  0   65537  10 1"                          "; tremolo wave, sine"                          "f3  0   65537  10 1"                          )                :allocation :class :type list :accessor orc-header)   (InstID :initform 1  :allocation :class  :accessor InstID)   ( amp	:type number		:initarg :amp   		:initform 500.0		:accessor amp)   ( f0		:type number        	:initarg :f0        	:initform 110.0        	:accessor f0)   ( bal	:type number		:initarg :bal   		:initform 0.5		:accessor bal); this is actually N1, kept as fq for compatibility with sub-comps(+)   ( freq	:type number		:initarg :freq   		:initform 4.0		:accessor freq)   ( n2		:type number		:initarg :n2  		:initform 1.0		:accessor n2)   ( imin	:type number		:initarg :imin  		:initform 0.0		:accessor imin)   ( imax	:type number		:initarg :imax  		:initform 3.0		:accessor imax)   ( ienv	:type cs-table		:initarg :ienv                                                  ; x-pts y-pts decimals number size  		:initform (make-cs-table  'Gen07  '(0 256 512) '(0 100 0) 1 "?" 513)		:accessor ienv)   ( jta	:type number		:initarg :jta   		:initform 0.0		:accessor jta)   ( tra	:type number		:initarg :tra   		:initform 0.0		:accessor tra)   ( trf	:type number		:initarg :trf   		:initform 5.0		:accessor trf)   ( atk	:type number		:initarg :atk   		:initform 0.01		:accessor atk)   ( dec	:type number		:initarg :dec   		:initform 0.05		:accessor dec)   ( aenv	:type cs-table		:initarg :aenv                                                  ; x-pts y-pts decimals number size  		:initform (make-cs-table  'Gen07  '(0 256 512) '(0 1 0) 1 "?" 513)		:accessor aenv)   ( jtv	:type number		:initarg :jtv   		:initform 0.5		:accessor jtv)   ( vfq	:type number		:initarg :vfq   		:initform 6.0		:accessor vfq)   ( fdev	:type number		:initarg :fdev   		:initform 0.0		:accessor fdev)   ( fenv	:type cs-table		:initarg :fenv                                                  ; x-pts y-pts decimals number size  		:initform (make-cs-table  'Gen07  '(0 256 512) '(0 1 0) 1 "?" 513)		:accessor fenv)   ( plow	:type number		:initarg :plow   		:initform 0.0		:accessor plow)   ( pup 	:type number		:initarg :pup   		:initform 0.0		:accessor pup)   ( penv	:type cs-table		:initarg :penv                                                  ; x-pts y-pts decimals number size  		:initform (make-cs-table  'Gen07  '(0 256 512) '(0 1 0) 1 "?" 513)		:accessor penv)   ( pdur	:type number		:initarg :pdur   		:initform 0.1		:accessor pdur)   ( pflg	:type number		:initarg :pflg   		:initform 1		:accessor pflg))(:documentation   "Instrument FM1m.orc from CSorc.;*****************************************************************************;	FREQUENCY MODULATION INSTRUMENT N. 31;		TYPE 1 : COMPLETE INSTRUMENT MONO (BALANCE MODULE WITH SINE);-----------------------------------------------------------------------------;                      NEW VERSION VALID FROM CHROMA2001;-----------------------------------------------------------------------------; SIMPLIFIED PERCEPTUAL COMPENSATION: SINCE THE COMPUTATION IS FLOATING POINT;    NO NEED TO REDUCE THE AMPLITUDES IF MAXIMUM IS > 1 AFTER THE COMPENSATION; ALSO NO MODIFICATION OF THE GLOBAL AMPLITUDE TO A RELATIVE AMPLITUDE;-----------------------------------------------------------------------------;	p1	instrument number [31];	p2	action time [sec];	p3	duration [sec];	p4	global amplitude (0:1000);	p5	reference frequency (f0) [Hz];  	(p6)	stereo pan   ( 0 = left / 1 = right );	p7	carrier frequency factor (N1);	p8	modulation frequency factor (N2);	p9	minimum index;	p10	maximum index;	p11	function number for index envelope;	p12	jitter amplitude, with internal perceptual compensation [0:1];	p13	tremolo amplitude [0:1];	p14	tremolo frequency [Hz];	p15	attack duration [sec];	p16	decay duration [sec], with internal readjustment if needed;	p17 	function number for amplitude envelope;	p18	balance freq.jitter/vibrato [1 = jitter / 0 = vibrato];	p19	vibrato frequency [Hz];	p20	frequency deviation [semitones];	p21	function number for frequency envelope;	p22	lower interval for portamento [semitones];	p23	upper interval for portamento [semitones];	p24	function number for portamento envelope;	p25	portamento duration [sec];	p26	modulation freq. affected by portamento ? (0 = no; 1 = yes);       if 0, gliss will have a spectral effect (sweep);       if 1, gliss will sound like a real gliss + spectral sweep;-----------------------------------------------------------------------------; KONTROL KEYWORDS FOR CHROMA2001 (CTL1);  GLOBAL KEYWORDS:;	ACTION-TIME	: start time of the whole event (0.0);	DURTOT		: total duration of the event (longer components are;      		              automatically clipped) (1.0);	AMPTOT		: amplitude scaler (1.0);	NUMROWS		: amount of rows (components) in the event (1);  LOCAL KEYWORDS:;  GENERAL;   E-DELS		:	entry delays [sec] (0.0);	DURS		:	duration [0-1, scaler of DURTOT] (1.0);	AMP		:	amplitude [0-1000, scaler of AMPTOT] (500.0);	F0		:	fundamental frequency for the event [Hz] (110.0);	BAL		:	panpot [0=left, 1=right] (STEREO VERSION ONLY) (0.5);	FREQ		:	N1, tuned to the closest integer value to the frequency [Hz];                 		 of the formant (in this field give the frequency);	N2		:	N2 for all the components (1.0);  INDEX;	IMIN	:	minimum index (1.0);	IMAX	:	maximum index (3.0);	IENV	:	index envelope [GEN];  AMPLITUDE ENVELOPE;	ATK		:	attack time [sec] (0.01);	DEC		:	decay time [sec] (0.05);	AENV		:	amplitude envelope [GEN];  AMPLITUDE MODULATION;	JTA		:	jitter amplitude [0-1, % of amplitude + compensation] (0.0);	TRA		:	tremolo amplitude [0-1, % of amplitude] (0.0);	TRF		:	tremolo frequency [Hz] (5.0);  FREQUENCY MODULATION;	JTV		:	vibrato/jitter panpot [0 = all vibrato, 1 = all jitter] (0.5);	VFQ		:	vibrato frequency [Hz] (6.0);	FDEV		:	frequency deviation [semitones] (0.0);	FENV		:	frequency envelope [GEN];  PORTAMENTO;	PLOW		:	lowest (minimum) portamento amplitude [semitones] (0.0);	PUP		:	upper (maximum) portamento amplitude [semitones] (0.0);	PENV		:	portamento envelope [GEN];	PDUR		:	portamento duration [sec[ (0.1);	PFLG		:	portamento flag [see above] (1);  SUB-COMPONENTS;	NPART		:	number of sub-components (0);	STON		:	aleatoric frequency distribution for each sub-component (0.06);				POSITIVE = distribution is linear;				NEGATIVE = distribution is logarithmic;	STON2		:	aleatoric frequency distribution around the value of N2 (0.01);				POSITIVE = distribution is linear;				NEGATIVE = distribution is logarithmic;	ED2		:	entry delay of each sub-compoment [sec] (0.01);				   (cumulative effect);	DUR2		:	duration of each sub-component [0-1, nil = use the duration;				  of the main component] (1.0);	AMP2		:	amplitude of each sub-component [0-1, nil = use the amplitude;				  of the main component] (1.0);-----------------------------------------------------------------------------; COMPULSORY FUNCTIONS :;	f1	audio sine wave;	f2	vibrato (sine wave);	f3	tremolo (sine wave); FUNCTIONS USED BY OTHER INSTRUMENTS;   	f4	function for janusing;	f5	large non-interpolating sine for the FOF; OTHER USEFUL FUNCTIONS (CHROMA2001);  	 f6	constant 1;   	f7	constant 0;   	f8	ascending line (0->1) for reading into a table;   	f9	simple triangle (0-1-0) for default envelopes;************************************************************************   "   )  (:icon 613)  );******************************************************************;			SUB-CLASSES;******************************************************************; FM1M;------------------------------------------------------------------(defclass! fm1m  (fm1m-root)  (   ; GLOBAL SLOTS: THE METHOD BELOW TRANSFORMS THEM INTO GLOBAL SLOTS   ;    ATTENTION: A GLOBAL SLOT SHOULD NOT HAVE AN INITARG   ( durtot :type number            :initform 1.0            :accessor durtot)   ( amptot :type number            :initform 1.0            :accessor amptot)   ( gbl-f0 :type number            :initform 110.0            :accessor gbl-f0)   ( gbl-N2 :type number            :initform 1.0            :accessor gbl-N2)   ( npart :type number           :initarg :npart            :initform 0           :accessor npart)   ( ston :type number          :initarg :ston          :initform 0.06          :accessor ston)   ( ston2 :type number          :initarg :ston2          :initform 0.01          :accessor ston2)   ( ed2 :type number         :initarg :ed2         :initform 0.01         :accessor ed2)   ( dur2 :type number          :initarg :dur2          :initform -1          :accessor dur2)   ( amp2 :type number          :initarg :amp2          :initform -1          :accessor amp2))  (:documentation      "Extension of the instrument FM1m, class fm1m-root.Added global slots:  durtot [sec] = total duration of the whole event [1.0]  amptot [0-1] = global amplitude scaler [1.0]  gbl-f0 [Hz]  = global fundamental frequency '110.0]  gbl-N2       = global N2 [1.0]Added local slots:  npart [int] = number of sub-components  ston [0-1]  = maximum frequency deviation for the sub-components		positive = linear distribution (value in %)		negative = logarithmic distribution (value in semitones)  ston2 [0-1]  = maximum frequency deviation for N2		positive = linear distribution (value in %)		negative = logarithmic distribution (value in semitones)  ed2 [sec]   = entry delay of each sub-component (cumulative effect)   dur2 [0-1]  = duration of each sub-component (scaler of DURTOT) (nil)                   (if nil, use the value of the main component)  amp2 [0-1]  = amplitude of each sub-component (scaler of AMPTOT) (nil)                   (if nil, use the value of the main component)")  (:icon 613)  );------------------------------------------------------------------;	METHODS FOR THIS CLASS;------------------------------------------------------------------; ADD SOME GLOBAL SLOTS (THE FIRST ONES ON THE LEFT OF A CLASS BOX);     THIS METHOD MUST BE DEFINED FOR THIS CLASS(defmethod get-slot-in-out-names ((self fm1m)); MEANING OF THE FIELDS:;   SLOT NAMES (THE FIRST 4 ARE THE DEFAULT ONES);   DEFAULT VALUES;   DOCUMENTATION;   T IF IT IS A MENU   (values '("self" "numrows" "action-time" "user-fun"             "durtot" "amptot" "gbl-f0" "gbl-N2")           '(nil 1 0 nil 1.0 1.0 110.0 1.0)           '("object or object list"             "How many vertical components for init ?"             "local event offset (in seconds)"             "user-defined function"             "Total duration for the whole event [sec]"             "Global amplitude scaler [0-1]"             "Global fundamental frequency [Hz]"             "Global N2")           '(nil nil nil nil nil nil nil nil))); SPECIFY WHICH ARE THE GLOBAL SLOTS(defmethod fixed-slots-list ((x om::fm1m))  "Specifies the fixed (global) slots for this class"  '(numrows action-time user-fun durtot amptot gbl-f0 gbl-N2)); ELIMINATE THE LAST 6 SLOTS IN THE INSTRUMENT (NOT NEEDED IN THE SCORE)(defmethod nullslots ((x om::fm1m))  "Eliminate the last 6 slots from the score"  6)#|;------------------------------------------------------------------; INCLUDE THE COMPULSORY FUNCTIONS AT THE BEGINNING OF A SCORE FILE;     THIS METHOD MUST BE DEFINED FOR THIS CLASS(defmethod! orc-header ((self fm1m))  (list   "; Marco's GEN functions *********************************************************"   "; AUDIO WAVE"   "f1  0   4097   9  1  1  0"   "; FREQUENCY VIBRATO"   "f2  0   4097   9  1  1  0"   "; AMPLITUDE VIBRATO"   "f3  0   4097   9  1  1  0"   ))(defmethod! orc-header ((self fm1m-root))  (list   "; Marco's GEN functions *********************************************************"   "; AUDIO WAVE"   "f1  0   4097   9  1  1  0"   "; FREQUENCY VIBRATO"   "f2  0   4097   9  1  1  0"   "; AMPLITUDE VIBRATO"   "f3  0   4097   9  1  1  0"   ))|#;******************************************************************