;******************************************************************(in-package cr);------------------------------------------------------------------; FUNCTIONS TO GENERATE A SYNTHETIC MODEL TO BE USED AT A CTL2 LEVEL;******************************************************************; FUNCTIONS:;	make-cseq;	build-fql;******************************************************************;------------------------------------------------------------------; FUNCTIONS;------------------------------------------------------------------(defun make-cseq (lfq lmkrs &optional lamp)"Make a synthetic cseq model.lfq: list of frequencieslmkrs: list of markers (should be at least one more as the frequencies).lamp: optional list of amplitudesNB:The elements of lfq should be 2 minimum (for the time being!).The elements of lamp can either be numbers (same amplitude for all the frequencies)   or lists (different amplitudes for each frquency).If the amplitudes and frequencies have a different amount of elements, the model will   stop when the first list has come to an end.It is possible to build models without amplitudes."; TESTS   (when (<= (length lmkrs) (min (length lamp) (length lfq)))     (error "I cannot build a model if you do not give me at least one marker more than frequencies or amplitudes, come on, ~a~!%~a" (getenv CRUSER) lmkrs))   (let ((fql-list           (if lamp            (loop for amp in lamp                  for fq in lfq                  collect (build-fql fq amp))            (loop for fq in lfq                  collect (build-fql fq)))))     (make-instance 'model-cseq       :fql-list fql-list       :markers lmkrs       )));------------------------------------------------------------------(defun build-fql (lfq &optional lamp)"Build a fql, trying to do its best!lfq: list of frequencieslamp: list of amplitudesIf there are too few amplitudes, repeat the last one until all the frequencies have an amplitude."  (if lamp    (let* ((lamp (om::list! lamp))		; IF THE AMPLITUDE IS A NUMBER, WRITE IT INTO A LIST           (lamp (l-val (length lfq) lamp)))	; SELECT AS MANY AMPS AS FREQUENCIES      (make-instance 'fql :the-list lfq :amplitudes lamp))    (make-instance 'fql :the-list lfq)));******************************************************************