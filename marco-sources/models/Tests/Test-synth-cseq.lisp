;******************************************************************;       Test-synth-cseq.lisp;   Tests of a synthetic cseq model;-----------------------------------------------------------------------------;                            VERSION FOR OMCHROMA 05;                                   050304;-----------------------------------------------------------------------------; NB: TO USE THE CHROMA MODELS THE marco LIBRARY MUST BE LOADED;-----------------------------------------------------------------------------(in-package cr)(unless (boundp 'xp2-)  (error "You should load your library, Marco... :-( !~%"));-----------------------------------------------------------------------------;-----------------------------------------------------------------------------;		PART 1 : SET THE GLOBAL PARAMETERS;-----------------------------------------------------------------------------        ; DIRECTORY WHERE THE ANALYSIS MODELS ARE TO BE FOUND(setenv LLamod CRXdata);-----------------------------------------------------------------------------(format t "************************* TESTING PROCESS: SECTION 1~%"); THE SIMPLEST, MOST DIRECT WAY OF BUILDING A FQL FOR A CSEQ MODEL; WITHOUT AMPLITUDES(setf fql-1      (build-fql '(100 200 300))); WITHOUT DIFFERENT AMPLITUDES PER FREQUENCY(setf fql-2      (build-fql '(100 200 300)                 '(10 20 30)))(setf fql-2a      (build-fql '(100 200 300)                 '(10 20)))(setf fql-2b      (build-fql '(100 200 300)                 '(10 20 30 40 50))); WITHOUT THE SAME AMPLITUDE PER FREQUENCY(setf fql-3      (build-fql '(100 200 300)                 '50));-----------------------------------------------------------------------------(format t "************************* TESTING PROCESS: SECTION 2~%"); THE SIMPLEST, MOST DIRECT WAY OF MAKING A MODEL; EACH INSTANCE HAS THE SAME AMPLITUDES(setf cseq-1      (make-cseq; 2 FREQUENCIES PER MODEL       '((300 400) (500 600) (700 800)); MARKERS       '(0 1 2 3); EACH INSTANCE HAS THE SAME AMPLITUDES       '(10 20 30)))(markers cseq-1); EACH INSTANCE HAS DIFFERENT AMPLITUDES(setf cseq-2      (make-cseq       '((500 550) (600 650) (700 750))       '(0 1 2 3); EACH INSTANCE HAS THE DIFFERENT AMPLITUDES       '((20 25) (30  35) (40 45)))); MODEL WITHOUT AMPLITUDES(setf cseq-3      (make-cseq       '((500 550) (600 650) (700 750))       '(0 1 2 3)));-----------------------------------------------------------------------------(format t "************************* TESTING PROCESS: SECTION 3s~%");-----------------------------------------------------------------------------;		PART 3 : SPECIFY SOME AD-HOC CONTROL MODELS;-----------------------------------------------------------------------------(setf ctl-1      '(; THIS FUNCTION DOES NOTHING, BUT IT COULD RANDOMLY VARY EACH E-DEL        (E-DELS '(lambda(x)(ran-from 0.0 0.0)))        ; USE AS A UNIQUE DURATION THE DURATION OF THE CURRENT MODEL        (DURS (call get-model-ldur))       ; MULTIPLY THE MODEL'S AMPLITUDES BY THE VALUE OF GBLAMP        (AMP (call get-model-norm-gblamp))        ; FETCH THE MODEL'S FREQUENCIES        (FREQ (call get-model-fq))        ; DECIMAL PRECISION IN WRITING THE CSOUND SCORE        (lprecision 2)                  ));-----------------------------------------------------------------------------;-----------------------------------------------------------------------------;		PART 4 : COMPUTE THE ACTUAL EVENTS;-----------------------------------------------------------------------------; ELIMINATE ALL THE NOTES BELOW THIS DURATION(set-gbl 'DURMIN 0.01);-----------------------------------------------------------------------------; USE OM TO PERFORM THIS, EVALUATE THE LINES BELOW;-----------------------------------------------------------------------------(setf s-1      (ctl2 (make-instance 'om::add-1) cseq-1 ctl-1))(setf s-2      (ctl2 (make-instance 'om::add-1) cseq-2 ctl-1));-----------------------------------------------------------------------------(format t "************************* TESTING PROCESS: SECTION 4s~%");-----------------------------------------------------------------------------;		PART 3 : SPECIFY SOME AD-HOC CONTROL MODELS;-----------------------------------------------------------------------------(setf ctl-1      '(; THIS FUNCTION DOES NOTHING, BUT IT COULD RANDOMLY VARY EACH E-DEL        (E-DELS '(lambda(x)(ran-from 0.0 0.0)))        ; USE AS A UNIQUE DURATION THE DURATION OF THE CURRENT MODEL        (DURS (call get-model-ldur))       ; MULTIPLY THE MODEL'S AMPLITUDES BY THE VALUE OF GBLAMP        (AMP 100.0)        ; FETCH THE MODEL'S FREQUENCIES        (FREQ (call get-model-fq))        ; DECIMAL PRECISION IN WRITING THE CSOUND SCORE        (lprecision 2)                  ));-----------------------------------------------------------------------------;-----------------------------------------------------------------------------;		PART 4 : COMPUTE THE ACTUAL EVENTS;-----------------------------------------------------------------------------; ELIMINATE ALL THE NOTES BELOW THIS DURATION(set-gbl 'DURMIN 0.01);-----------------------------------------------------------------------------; USE OM TO PERFORM THIS, EVALUATE THE LINES BELOW;-----------------------------------------------------------------------------(setf s-3      (ctl2 (make-instance 'om::add-1) cseq-3 ctl-1));******************************************************************