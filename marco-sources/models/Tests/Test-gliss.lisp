;******************************************************************;          Test-gliss.lisp;   Tests of a synthetic glissando;-----------------------------------------------------------------------------;                            VERSION FOR OMCHROMA 05;                                   050304;-----------------------------------------------------------------------------; NB: TO USE THE CHROMA MODELS THE marco LIBRARY MUST BE LOADED;-----------------------------------------------------------------------------(in-package cr)(unless (boundp 'xp2-)  (error "You should load your library, Marco... :-( !~%"));-----------------------------------------------------------------------------;		PART 1 : SET THE GLOBAL PARAMETERS;-----------------------------------------------------------------------------        ; DIRECTORY WHERE THE ANALYSIS MODELS ARE TO BE FOUND(setenv LLamod CRXdata);-----------------------------------------------------------------------------(format t "************************* TESTING PROCESS: SECTION 1~%"); THE SIMPLEST, MOST DIRECT WAY;   Without amlitudes;      Only freqs(setf m1a      (make-gliss-model       '((100 200 300) (1000 2000 3000)) '(0 0.5 1.0 1.5 2.0 2.5 3.0)));      Freqs + Ston (1 = 100% of current value) for first(setf m1b      (make-gliss-model       '((100 200 300) (1000 2000 3000) (0.1)) '(0 0.5 1.0 1.5 2.0 2.5 3.0)))(mapcar #'get-fql (fql-list m1b));      Freqs + Ston for first + Exp for first and second ;      NB: the places of Ston and Exp must correspond in the two lists(setf m1c      (make-gliss-model       '((100 200 300) (1000 2000 3000) (0.2 0.0) (0.2 -0.2))       '(0 0.5 1.0 1.5 2.0 2.5 3.0)));      With amplitudes (setf m1d      (make-gliss-model       '((100 200 300) (1000 2000 3000))       '(0 0.5 1.0 1.5 2.0 2.5 3.0)       '((100) (400))))(mapcar #'(lambda (x) (amplitudes x))                       (fql-list m1d));-----------------------------------------------------------------------------;		PART 3 : SPECIFY SOME AD-HOC CONTROL MODELS;-----------------------------------------------------------------------------(setf ctl-f1      '(; THIS FUNCTION DOES NOTHING, BUT IT COULD RANDOMLY VARY EACH E-DEL        (E-DELS '(lambda(x)(ran-from 0.0 0.0)))        ; USE AS A UNIQUE DURATION THE DURATION OF THE CURRENT MODEL        (DURS (call get-model-ldur))       ; MULTIPLY THE MODEL'S AMPLITUDES BY THE VALUE OF GBLAMP        (AMP 100.0)        ; FETCH THE MODEL'S FREQUENCIES        (FREQ (call get-model-fq))        ; DECIMAL PRECISION IN WRITING THE CSOUND SCORE        (lprecision 2)                  ))(setf ctl-f2      '(        (E-DELS '(lambda(x)(ran-from 0.0 0.0)))        (DURS (call get-model-ldur))        (AMP (call get-model-amp))        (FREQ (call get-model-fq))        (lprecision 2)                  ));-----------------------------------------------------------------------------; ELIMINATE ALL THE NOTES BELOW THIS DURATION(set-gbl 'DURMIN 0.01);-----------------------------------------------------------------------------(setf s-m1a      (ctl2 (make-instance 'om::add-1) m1a ctl-f1))(setf s-m1b      (ctl2 (make-instance 'om::add-1) m1b ctl-f1))(setf s-m1c      (ctl2 (make-instance 'om::add-1) m1c ctl-f1))(setf s-m1d      (ctl2 (make-instance 'om::add-1) m1d ctl-f2));-----------------------------------------------------------------------------(format t "************************* TESTING PROCESS: SECTION 2~%")(setf fq-from      '(100 200 300))(setf fq-to      '(100 300 400))(setf amp-from      '(10))(setf amp-to      '(40 50 60))(setf markers      (build-sequence 0.0 5.0 11));-----------------------------------------------------------------------------(format t "************************* TESTING PROCESS: SECTION 3~%")(setf m2a      (make-gliss-model (list fq-from fq-to)                  markers                  (list amp-from amp-to)))(mapcar #'get-fql (fql-list m2a))(mapcar #'(lambda (x) (amplitudes x))                       (fql-list m2a));-----------------------------------------------------------------------------;-----------------------------------------------------------------------------;		PART 3 : SPECIFY SOME AD-HOC CONTROL MODELS;-----------------------------------------------------------------------------;-----------------------------------------------------------------------------;-----------------------------------------------------------------------------;		PART 4 : COMPUTE THE ACTUAL EVENTS;-----------------------------------------------------------------------------; ELIMINATE ALL THE NOTES BELOW THIS DURATION(set-gbl 'DURMIN 0.01);-----------------------------------------------------------------------------; USE OM TO PERFORM THIS, EVALUATE THE LINES BELOW;-----------------------------------------------------------------------------(setf gl-1      (ctl2 (make-instance 'om::add-1) m2a ctl-f2));-----------------------------------------------------------------------------(format t "************************* TESTING PROCESS: SECTION 4~%"); LARGE EXAMPLE(setf fq-from      (build-sequence 100.0 300.0 15))(setf fq-to      (build-sequence 200.0 600.0 15))(setf amp-from      (reverse (build-sequence 10.0 50.0 15)))(setf amp-to      (build-sequence 10.0 50.0 15))(setf markers      (build-sequence 0.0 5.0 100));-----------------------------------------------------------------------------(format t "************************* TESTING PROCESS: SECTION 5~%")(setf m3a      (make-gliss-model (list fq-from fq-to)                  markers                  (list amp-from amp-to)))(mapcar #'get-fql (fql-list m3a))(mapcar #'(lambda (x) (amplitudes x))                       (fql-list m3a));-----------------------------------------------------------------------------;-----------------------------------------------------------------------------;		PART 3 : SPECIFY SOME AD-HOC CONTROL MODELS;-----------------------------------------------------------------------------(setf ctl-f3      '(        (E-DELS '(lambda(x)(ran-from 0.0 0.0)))        (DURS 0.5)        (DURS (call get-model-ldur 10.0))        (AMP (call get-model-amp))        (FREQ (call get-model-fq))        (AENV 501)        (lprecision 4)                  ));-----------------------------------------------------------------------------;-----------------------------------------------------------------------------;		PART 4 : COMPUTE THE ACTUAL EVENTS;-----------------------------------------------------------------------------; ELIMINATE ALL THE NOTES BELOW THIS DURATION(set-gbl 'DURMIN 0.01);-----------------------------------------------------------------------------; USE OM TO PERFORM THIS, EVALUATE THE LINES BELOW;-----------------------------------------------------------------------------(setf gl-2      (ctl2 (make-instance 'om::add-1) m3a ctl-f3)              );******************************************************************